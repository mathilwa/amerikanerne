{"version":3,"sources":["App.tsx","icons/cards.png","SpillTabell.tsx","index.tsx"],"names":["Slag","SpillTabell","spill","runder","spillerIder","map","id","spillereData","className","Object","keys","runde","spillerId","length","values","reduce","akk","poengliste","App","useState","gamleSpill","visNyttSpillInput","setVisNyttSpillInput","antallStikk","slag","nyMelding","setNyMelding","lag","melder","melding","Klover","setSpill","console","log","nyRundedata","setNyRundedata","src","logo","alt","onClick","typeSlag","type","onChange","checked","htmlFor","value","event","poeng","parseInt","target","antallRunderTilNa","gammeltSpill","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yIAKKA,E,qDCLU,G,KAAA,IAA0B,mC,OC6D1BC,EArDsB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC9BC,EAASD,EAAMC,OASrB,OACI,qCACI,4CACc,IACTD,EAAME,YAAYC,KAAI,SAACC,GAAD,OACnB,+BAA6BC,EAAaD,IAA/B,WAAaA,SAIhC,qBAAKE,UAAU,cAAf,SACKN,EAAME,YAAYC,KAAI,SAACC,GAAD,OACnB,+BAAyBC,EAAaD,IAA3B,OAASA,QAG3BH,GACG,qCACI,8BACKM,OAAOC,KAAKP,GAAQE,KAAI,SAACM,GAAD,OACrB,qBAAiBH,UAAU,cAA3B,SACKC,OAAOC,KAAKP,EAAOQ,IAAQN,KAAI,SAACO,GAAD,OAC5B,oBAAoBJ,UAAU,QAA9B,SACKL,EAAOQ,GAAOC,IADVA,OAFPD,QASjBF,OAAOC,KAAKP,GAAQU,OAAS,GAC1B,sBAAKL,UAAU,WAAf,oBACY,IACR,qBAAKA,UAAU,cAAf,SACKN,EAAME,YAAYC,KAAI,SAACC,GAAD,OACnB,gCAvCAM,EAuC+CN,EAtCvEH,EACOM,OAAOK,OAAOX,GAAQY,QAAO,SAACC,EAAKC,GAAN,OAAqBD,EAAMC,EAAWL,KAAY,GAEnF,IAmCgC,MAAQN,GAvCpB,IAACM,kB,SFN/BZ,K,mBAAAA,E,YAAAA,E,kBAAAA,E,eAAAA,M,KAiBE,IAAMO,EAAwB,CACjC,EAAK,QACL,EAAK,SACL,EAAK,WACL,EAAK,YAiHMW,EAtGO,WAAO,IAAD,EACHC,mBAAkB,IAAhCC,EADiB,sBAE0BD,oBAAkB,GAF5C,mBAEjBE,EAFiB,KAEEC,EAFF,OAGUH,mBAAkB,CAAEI,YAAa,KAAMC,KAAM,OAHvD,mBAGjBC,EAHiB,KAGNC,EAHM,OAKEP,mBAAgB,CACtCf,YAAa,CAAC,IAAK,IAAK,IAAK,KAC7BuB,IAAK,CAAC,IAAK,KACXC,OAAQ,IACRC,QAAS,CAAEL,KAAMxB,EAAK8B,OAAQP,YAAa,GAC3CpB,OAAQ,CACJ,EAAK,CAAE,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,MAXpB,mBAKjBD,EALiB,KAKV6B,EALU,KAcxBC,QAAQC,IAAIR,GAdY,MAecN,mBAAuB,MAfrC,mBAejBe,EAfiB,KAeJC,EAfI,KAkCxB,OACI,sBAAK3B,UAAU,MAAf,UACI,wBAAQA,UAAU,YAAlB,SACI,qBAAK4B,IAAKC,EAAM7B,UAAU,WAAW8B,IAAI,WAG7C,6CAEA,wBAAQC,QAAS,kBAAMjB,GAAqB,IAA5C,0BACCD,GACG,gCACI,4CACc,IACTnB,EAAME,YAAYC,KAAI,SAACC,GAAD,OACnB,+BAA6BC,EAAaD,IAA/B,WAAaA,SAGhC,qCACI,4CACA,mCACKG,OAAOK,OAAOd,GAAMK,KAAI,SAACmC,GAAD,OACrB,qCACI,uBACIC,KAAK,QACLnC,GAAIkC,EACJE,SAAU,kBAAMhB,EAAa,2BAAKD,GAAN,IAAiBD,KAAMgB,MACnDG,QAASlB,EAAUD,OAASgB,IAEhC,uBAAOI,QAASJ,EAAhB,SAA2BA,kBAOnD,cAAC,EAAD,CAAatC,MAAOA,IAEpB,sBAAKM,UAAU,WAAf,UACI,mBAAGA,UAAU,iBAAb,6BACCN,EAAME,YAAYC,KAAI,SAACC,GAAD,OACnB,sBAAcE,UAAU,kBAAxB,UACI,uBAAOA,UAAU,gBAAgBoC,QAAStC,EAA1C,SACKC,EAAaD,KAElB,uBACIE,UAAU,gBAEVF,GAAIA,EACJmC,KAAK,OACLI,MAAOX,GAAeA,EAAY5B,GAAM4B,EAAY5B,GAAM,GAC1DoC,SAAU,SAACI,GAAD,OAnEPlC,EAmEoCN,EAnEjByC,EAmEqBC,SAASF,EAAMG,OAAOJ,YAjEjFV,EADAD,EACe,2BAAKA,GAAN,kBAAoBtB,EAAYmC,IAE/B,eAAGnC,EAAYmC,IAJZ,IAACnC,EAAmBmC,IA+DjBzC,KANHA,MAcd,wBAAQiC,QAhEC,WACjB,IAAMW,EAAoBhD,EAAMC,OAASM,OAAOC,KAAKR,EAAMC,QAAQU,OAAS,EAExEqB,GACAH,EAAS,2BAAK7B,GAAN,IAAaC,OAAO,2BAAMD,EAAMC,QAAb,kBAAsB+C,EAAoB,EAAIhB,OAG7EC,EAAe,OAyDP,yBAGHf,EAAWP,OAAS,GACjB,8BACKO,EAAWf,KAAI,SAAC8C,GAAD,OACZ,cAAC,EAAD,CAAajD,MAAOiD,a,MG9H5CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.3c07eae1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport logo from './icons/cards.png';\nimport SpillTabell from './SpillTabell';\n\nenum Slag {\n    Klover = 'Kl√∏ver',\n    Spar = 'Spar',\n    Hjerter = 'Hjerter',\n    Ruter = 'Ruter',\n}\n\ntype Spiller = Record<string, string>;\ninterface Melding {\n    slag: Slag | null;\n    antallStikk: number | null;\n}\n\ntype Poeng = Record<string, number>;\n\ntype Runder = Record<string, Poeng>;\n\nexport const spillereData: Spiller = {\n    '1': 'Trond',\n    '2': 'Torunn',\n    '3': 'Kristian',\n    '4': 'Mathilde',\n};\n\nexport interface Spill {\n    lag: string[];\n    melder: string;\n    melding: Melding | null;\n    runder: Runder | null;\n    spillerIder: string[];\n}\n\nconst App: React.FC = () => {\n    const [gamleSpill] = useState<Spill[]>([]);\n    const [visNyttSpillInput, setVisNyttSpillInput] = useState<boolean>(false);\n    const [nyMelding, setNyMelding] = useState<Melding>({ antallStikk: null, slag: null });\n\n    const [spill, setSpill] = useState<Spill>({\n        spillerIder: ['1', '2', '3', '4'],\n        lag: ['1', '2'],\n        melder: '1',\n        melding: { slag: Slag.Klover, antallStikk: 8 },\n        runder: {\n            '0': { '1': 3, '2': 3, '3': 3, '4': 3 },\n        },\n    });\n    console.log(nyMelding);\n    const [nyRundedata, setNyRundedata] = useState<Poeng | null>(null);\n\n    const oppdaterRundedata = (spillerId: string, poeng: number) => {\n        if (nyRundedata) {\n            setNyRundedata({ ...nyRundedata, [spillerId]: poeng });\n        } else {\n            setNyRundedata({ [spillerId]: poeng });\n        }\n    };\n    const leggTilRunde = () => {\n        const antallRunderTilNa = spill.runder ? Object.keys(spill.runder).length : 0;\n\n        if (nyRundedata) {\n            setSpill({ ...spill, runder: { ...spill.runder, [antallRunderTilNa + 1]: nyRundedata } });\n        }\n\n        setNyRundedata(null);\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"appHeader\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </header>\n\n            <p>Amerikanerne</p>\n\n            <button onClick={() => setVisNyttSpillInput(true)}>+ Nytt spill</button>\n            {visNyttSpillInput && (\n                <div>\n                    <div>\n                        Spillere:{' '}\n                        {spill.spillerIder.map((id) => (\n                            <span key={'spillere' + id}>{spillereData[id]}</span>\n                        ))}\n                    </div>\n                    <>\n                        <p>Hva meldes?</p>\n                        <>\n                            {Object.values(Slag).map((typeSlag) => (\n                                <>\n                                    <input\n                                        type=\"radio\"\n                                        id={typeSlag}\n                                        onChange={() => setNyMelding({ ...nyMelding, slag: typeSlag })}\n                                        checked={nyMelding.slag === typeSlag}\n                                    />\n                                    <label htmlFor={typeSlag}>{typeSlag}</label>\n                                </>\n                            ))}\n                        </>\n                    </>\n                </div>\n            )}\n            <SpillTabell spill={spill} />\n\n            <div className=\"nyePoeng\">\n                <p className=\"nyePoengTittel\">Legg til poeng:</p>\n                {spill.spillerIder.map((id) => (\n                    <div key={id} className=\"leggTilNyePoeng\">\n                        <label className=\"labelNyePoeng\" htmlFor={id}>\n                            {spillereData[id]}\n                        </label>\n                        <input\n                            className=\"inputNyePoeng\"\n                            key={id}\n                            id={id}\n                            type=\"text\"\n                            value={nyRundedata && nyRundedata[id] ? nyRundedata[id] : ''}\n                            onChange={(event) => oppdaterRundedata(id, parseInt(event.target.value))}\n                        />\n                    </div>\n                ))}\n                <button onClick={leggTilRunde}>Legg til</button>\n            </div>\n\n            {gamleSpill.length > 0 && (\n                <div>\n                    {gamleSpill.map((gammeltSpill) => (\n                        <SpillTabell spill={gammeltSpill} />\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/cards.01ec99a3.png\";","import React from 'react';\nimport './App.css';\nimport { Spill, spillereData } from './App';\n\ninterface Props {\n    spill: Spill;\n}\n\nconst SpillTabell: React.FC<Props> = ({ spill }) => {\n    const runder = spill.runder;\n\n    const finnTotalsumForSpiller = (spillerId: string) => {\n        if (runder) {\n            return Object.values(runder).reduce((akk, poengliste) => akk + poengliste[spillerId], 0);\n        }\n        return 0;\n    };\n\n    return (\n        <>\n            <div>\n                Spillere:{' '}\n                {spill.spillerIder.map((id) => (\n                    <span key={'spillere' + id}>{spillereData[id]}</span>\n                ))}\n            </div>\n\n            <div className=\"poengtabell\">\n                {spill.spillerIder.map((id) => (\n                    <span key={'navn' + id}>{spillereData[id]}</span>\n                ))}\n            </div>\n            {runder && (\n                <>\n                    <div>\n                        {Object.keys(runder).map((runde) => (\n                            <div key={runde} className=\"poengtabell\">\n                                {Object.keys(runder[runde]).map((spillerId) => (\n                                    <li key={spillerId} className=\"poeng\">\n                                        {runder[runde][spillerId]}\n                                    </li>\n                                ))}\n                            </div>\n                        ))}\n                    </div>\n                    {Object.keys(runder).length > 1 && (\n                        <div className=\"totalsum\">\n                            Totalt:{' '}\n                            <div className=\"poengtabell\">\n                                {spill.spillerIder.map((id) => (\n                                    <span key={'sum' + id}>{finnTotalsumForSpiller(id)}</span>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default SpillTabell;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}